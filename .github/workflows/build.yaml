name: build

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      max-parallel: 4
      matrix:
        include:
          - { host: x86_64, target: x86_64 }
          - { host: x86_64-musl, target: x86_64-musl }
    runs-on: ubuntu-22.04
    permissions:
      contents: write

    steps:
      - name: free space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL

      - name: checkout this repo
        uses: actions/checkout@v4
        with:
          ref: master
          path: extra

      - name: checkout void-packages
        uses: actions/checkout@v4
        with:
          repository: void-linux/void-packages
          ref: master
          path: void-packages

      - name: merge templates and edit shlibs
        run: |
          echo "==> copying templates..."
          cp -rv extra/srcpkgs/* void-packages/srcpkgs/

          SHLIBS_FILE="void-packages/common/shlibs"
          APPEND_FILE="extra/shlibs_append"
          REMOVE_FILE="extra/shlibs_remove"

          echo "==> updating common/shlibs..."
          if [ -f "$REMOVE_FILE" ]; then
            while IFS= read -r line; do
              [ -z "$line" ] && continue
              grep -vF "$line" "$SHLIBS_FILE" > "$SHLIBS_FILE.tmp" && mv "$SHLIBS_FILE.tmp" "$SHLIBS_FILE"
              echo "   - removed: $line"
            done < "$REMOVE_FILE"
          fi

          if [ -f "$APPEND_FILE" ]; then
            while IFS= read -r line; do
              [ -z "$line" ] && continue
              if ! grep -qF "$line" "$SHLIBS_FILE"; then
                echo "$line" >> "$SHLIBS_FILE"
                echo "   + added: $line"
              fi
            done < "$APPEND_FILE"
          fi

          echo "=> applying inline edits..."
          if [ -d "void-packages/srcpkgs/hyprutils/patches" ]; then
              echo "   - removing void-packages/srcpkgs/hyprutils/patches"
              rm -rf void-packages/srcpkgs/hyprutils/patches
          fi
      
      - name: prepare xbps-static
        run: |
          mkdir -p /opt/xbps
          curl -LO http://repo-default.voidlinux.org/static/xbps-static-latest.x86_64-musl.tar.xz
          tar xvf xbps-static-latest.x86_64-musl.tar.xz -C /opt/xbps
          rm xbps-static-latest.x86_64-musl.tar.xz

      - name: build
        env:
          XBPS_TARGET_ARCH: ${{ matrix.target }}
        run: |
          export PATH="/opt/xbps/usr/bin/:$PATH"
          echo "==> templates found:"
          find void-packages/srcpkgs -maxdepth 1 -mindepth 1 -type d
          cd void-packages

          if [[ "${{ matrix.host }}" == "${{ matrix.target }}" ]]; then
            ./xbps-src -A ${{ matrix.host }} binary-bootstrap
          else
            ./xbps-src -a ${{ matrix.target }} -A ${{ matrix.host }} binary-bootstrap
          fi

          if [[ "${{ matrix.target }}" == aarch64* ]]; then
            echo "==> bootstrapping cross toolchain for ${{ matrix.target }}"
            ./xbps-src -A ${{ matrix.host }} pkg cross-vpkg-dummy
            ./xbps-src -A ${{ matrix.host }} pkg cross-aarch64-linux-gnu
          fi

          pkgs=$(find ../extra/srcpkgs -maxdepth 1 -mindepth 1 -type d -printf "%f\n")
          echo "==> sorting dependencies..."
          sorted=$(./xbps-src sort-dependencies $pkgs)
          echo "==> build order:"
          printf '%s\n' $sorted

          failed=()

          for pkg in $sorted; do
            echo "==> building $pkg"
            if [[ "${{ matrix.host }}" == "${{ matrix.target }}" ]]; then
              ./xbps-src pkg -j$(nproc) -A ${{ matrix.host }} "$pkg" || failed+=("$pkg")
            else
              ./xbps-src pkg -j$(nproc) -a ${{ matrix.target }} -A ${{ matrix.host }} "$pkg" || failed+=("$pkg")
            fi
          done

      - name: sign
        env:
          PRIV_KEY: ${{ secrets.PRIV_KEY }}
          XBPS_ARCH: ${{ matrix.target }}
        working-directory: void-packages/hostdir/binpkgs/
        run: |
          export PATH="/opt/xbps/usr/bin/:$PATH"

          echo "==> writing private key to file..."
          printf "%s\n" "$PRIV_KEY" > private.pem
          chmod 600 private.pem

          echo "==> merging free + nonfree"
          if [ -d "nonfree" ]; then
              mv nonfree/*.xbps .
          fi

          xbps-rindex -a *.xbps || true
          xbps-rindex -r "$PWD"
          xbps-rindex -s --signedby "Encoded14 <linusken@tuta.io>" --privkey private.pem "$PWD"
          xbps-rindex -S --privkey private.pem "$PWD"/*.xbps
          xbps-rindex -c "$PWD"

          echo "==> cleaning up private key..."
          rm -f private.pem

      - name: upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binpkgs-${{ matrix.target }}
          path: |
            void-packages/hostdir/binpkgs/*.xbps*
            void-packages/hostdir/binpkgs/*repodata*
          retention-days: 3

  release:
    needs: build
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - name: download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: set release tag
        run: echo "TAG=build-$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG }}
          name: ${{ env.TAG }}
          files: artifacts/**/*
          overwrite_files: true
          fail_on_unmatched_files: false
