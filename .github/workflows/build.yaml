name: build

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

jobs:
  build:
    name: Build packages
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/void-linux/void-${{ matrix.config.libc }}-full:20250616R1
      options: --platform ${{ matrix.config.platform }} --privileged
      volumes:
        - /dev:/dev
      env:
        ARCH: '${{ matrix.config.arch }}'
        BOOTSTRAP: '${{ matrix.config.host }}'
        TEST: '${{ matrix.config.test }}'
    strategy:
      fail-fast: false
      matrix:
        config:
          - { arch: x86_64,       host: x86_64,      libc: glibc, platform: linux/amd64, test: 1 }
          - { arch: aarch64,      host: x86_64,      libc: glibc, platform: linux/amd64, test: 0 }
          - { arch: x86_64-musl,  host: x86_64-musl, libc: musl,  platform: linux/amd64, test: 1 }
          - { arch: aarch64-musl, host: x86_64-musl, libc: musl,  platform: linux/amd64, test: 0 }

    permissions:
      contents: write

    steps:
      - name: Prepare container
        run: |
          # switch to repo-ci mirror
          mkdir -p /etc/xbps.d && cp /usr/share/xbps.d/*-repository-*.conf /etc/xbps.d/
          sed -i 's|repo-default|repo-ci|g' /etc/xbps.d/*-repository-*.conf
          # install dependencies
          xbps-install -Syu xbps && xbps-install -yu && xbps-install -y sudo bash curl git
          # create non-root user
          useradd -G xbuilder -M builder

      - name: Checkout this repo
        run: |
          git clone --depth 1 "https://github.com/${{ github.repository }}.git" extra
          cd extra
          git fetch --no-tags origin "${{ github.sha }}" --depth 1
          git checkout --detach "${{ github.sha }}"

      - name: Checkout void-packages
        run: |
          git clone https://github.com/void-linux/void-packages.git void-packages
          cd void-packages
          git checkout --detach master

      - name: Merge templates and edit shlibs
        run: |
          echo "==> copying templates..."
          cp -rv extra/srcpkgs/* void-packages/srcpkgs/

          SHLIBS_FILE="void-packages/common/shlibs"
          APPEND_FILE="extra/shlibs_append"
          REMOVE_FILE="extra/shlibs_remove"

          echo "==> updating common/shlibs..."
          if [ -f "$REMOVE_FILE" ]; then
            while IFS= read -r line; do
              [ -z "$line" ] && continue
              grep -vF "$line" "$SHLIBS_FILE" > "$SHLIBS_FILE.tmp" && mv "$SHLIBS_FILE.tmp" "$SHLIBS_FILE"
              echo "   - removed: $line"
            done < "$REMOVE_FILE"
          fi

          if [ -f "$APPEND_FILE" ]; then
            while IFS= read -r line; do
              [ -z "$line" ] && continue
              if ! grep -qF "$line" "$SHLIBS_FILE"; then
                echo "$line" >> "$SHLIBS_FILE"
                echo "   + added: $line"
              fi
            done < "$APPEND_FILE"
          fi

          echo "=> applying inline edits..."
          if [ -d "void-packages/srcpkgs/hyprutils/patches" ]; then
              echo "   - removing void-packages/srcpkgs/hyprutils/patches"
              rm -rf void-packages/srcpkgs/hyprutils/patches
          fi

      - name: Prepare masterdir
        run: |
          cd void-packages
          chown -R builder:builder . &&
          sudo -Eu builder common/travis/set_mirror.sh &&
          sudo -Eu builder common/travis/prepare.sh &&
          common/travis/fetch-xtools.sh

      - name: Build
        run: |
          export PATH="/opt/xbps/usr/bin/:$PATH"
          cd void-packages
          pkgs=$(find ../extra/srcpkgs -maxdepth 1 -mindepth 1 -type d -printf "%f\n")
          
          if [ "$BOOTSTRAP" != "$ARCH" ]; then
              arch="-a $2"
          fi

          if [ "$TEST" = 1 ]; then
              test="-Q"
          fi

          PKGS=$(sudo -Eu builder ./xbps-src $test sort-dependencies $pkgs)

          for pkg in ${PKGS}; do
              sudo -Eu builder ./xbps-src -j$(nproc) -s $arch $test pkg "$pkg"
              [ $? -eq 1 ] && exit 1
          done

      - name: Sign
        env:
          PRIV_KEY: ${{ secrets.PRIV_KEY }}
          XBPS_ARCH: ${{ matrix.target }}
        working-directory: void-packages/hostdir/binpkgs/
        run: |
          export PATH="/opt/xbps/usr/bin/:$PATH"

          echo "==> writing private key to file..."
          printf "%s\n" "$PRIV_KEY" > private.pem
          chmod 600 private.pem

          echo "==> merging free + nonfree"
          if [ -d "nonfree" ]; then
              mv nonfree/*.xbps .
          fi

          xbps-rindex -a *.xbps || true
          xbps-rindex -r "$PWD"
          xbps-rindex -s --signedby "Encoded14 <linusken@tuta.io>" --privkey private.pem "$PWD"
          xbps-rindex -S --privkey private.pem "$PWD"/*.xbps
          xbps-rindex -c "$PWD"

          echo "==> cleaning up private key..."
          rm -f private.pem

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binpkgs-${{ matrix.target }}
          path: |
            void-packages/hostdir/binpkgs/*.xbps*
            void-packages/hostdir/binpkgs/*repodata*
          retention-days: 3

  release:
    needs: build
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Set release tag
        run: echo "TAG=build-$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG }}
          name: ${{ env.TAG }}
          files: artifacts/**/*
          overwrite_files: true
          fail_on_unmatched_files: false
